from constructs import Construct
from cdktf import VariableType, TerraformVariable, Fn, TerraformOutput
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.s3_bucket import S3Bucket
from imports.aws.s3_bucket_policy import S3BucketPolicy
from imports.aws.s3_bucket_public_access_block import S3BucketPublicAccessBlock
from imports.aws.s3_bucket_website_configuration import S3BucketWebsiteConfiguration
class MyConvertedCode(Construct):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        # The following providers are missing schema information and might need manual adjustments to synthesize correctly: aws.
        #     For a more precise conversion please use the --provider flag in convert.
        # Terraform Variables are not always the best fit for getting inputs in the context of Terraform CDK.
        #     You can read more about this at https://cdk.tf/variables
        bucket_name = TerraformVariable(self, "bucket_name",
            description="The name of the bucket",
            type=VariableType.STRING
        )
        ui = S3Bucket(self, "ui",
            bucket=bucket_name.value,
            force_destroy=True,
            lifecycle={
                "prevent_destroy": False
            },
            tags={
                "Environment": "Dev",
                "Name": "UI Bucket"
            }
        )
        S3BucketPolicy(self, "ui_policy",
            bucket=ui.id,
            policy=Fn.jsonencode({
                "Statement": [{
                    "Action": "s3:GetObject",
                    "Effect": "Allow",
                    "Principal": "*",
                    "Resource": "arn:aws:s3:::${" + bucket_name.value + "}/*",
                    "Sid": "PublicReadGetObject"
                }
                ],
                "Version": "2012-10-17"
            })
        )
        S3BucketPublicAccessBlock(self, "ui_public",
            block_public_acls=False,
            block_public_policy=False,
            bucket=ui.id,
            ignore_public_acls=False,
            restrict_public_buckets=False
        )
        website = S3BucketWebsiteConfiguration(self, "website",
            bucket=ui.id,
            error_document=[{
                "key": "index.html"
            }
            ],
            index_document=[{
                "suffix": "index.html"
            }
            ]
        )
        TerraformOutput(self, "bucket_domain_name",
            value=ui.bucket_domain_name
        )
        cdktf_terraform_output_bucket_name = TerraformOutput(self, "bucket_name_6",
            value=ui.id
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        cdktf_terraform_output_bucket_name.override_logical_id("bucket_name")
        TerraformOutput(self, "website_endpoint",
            value=website.website_endpoint
        )
